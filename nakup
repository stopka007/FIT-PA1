#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main (void) {
    int max_stringu = 100;
    int max_delka_stringu = 100;

    char** cely_seznam = NULL;
    cely_seznam = (char**) calloc(max_delka_stringu, sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        cely_seznam[g] = (char*) calloc(max_delka_stringu, sizeof(char));
    }
    char** jednotlivy_string = NULL; 
    jednotlivy_string = (char**) calloc(max_delka_stringu, sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        jednotlivy_string[g] = (char*) calloc(max_delka_stringu, sizeof(char));
    }
    char** nakupni_list = NULL;
    nakupni_list = (char **) calloc(max_delka_stringu, sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        nakupni_list[g] = (char*) calloc(max_delka_stringu, sizeof(char));
    }
    char** regaly = NULL;
    regaly = (char **) calloc(max_delka_stringu, sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        regaly[g] = (char*) calloc(max_delka_stringu, sizeof(char));
    }
    char** duplikat = NULL;
    duplikat = (char **) calloc(max_delka_stringu,sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        duplikat[g] = (char*) calloc(max_delka_stringu, sizeof(char));
    }
    char** nedostupne = NULL;
    nedostupne = (char **) calloc(max_delka_stringu, sizeof(char));
    for (int g = 0; g<max_stringu; g++){
        nedostupne[g] = (char*) calloc(max_delka_stringu, max_delka_stringu);
    }

    int n = 0;
    int i = 0;
    int zacatecni_index = 0;
    int pocet_v_regalech = 0;
    int cislo_regalu = 0;
    int pocet_slozek_nakupu = 0;
    int index_pro_nakupni_list = 0;
    int podminka_pro_regal = '0';
    int pocet_regalu = 0;
    int podminka_pro_new_line = 0;
    int cislo_iterace = 0;
    int new_max_stringu = 0;
    int podminka_pro_prvotni_regal = 0;
    char *line = NULL;
    size_t len;
    
    while (getline(&line, &len, stdin) != EOF) {
        if (*line != '\n'){
            line[strcspn(line, "\n")] = 0;
        }
        else {
            podminka_pro_new_line += 1;
        }
        int delka_line = strlen(line);
        new_max_stringu += 1 ;
        if (delka_line > max_delka_stringu) {
            max_delka_stringu += delka_line;
            jednotlivy_string = (char**) realloc(jednotlivy_string, max_stringu * sizeof(char));
            jednotlivy_string = (char**) calloc(max_stringu, sizeof(char));
            cely_seznam = (char **) realloc(cely_seznam, sizeof(char*) * max_stringu);
            for (int g = max_delka_stringu - new_max_stringu; g<max_stringu; g++){
                cely_seznam[g] = (char*) calloc(max_delka_stringu, sizeof(char));
                jednotlivy_string[g] = (char*) calloc(max_delka_stringu, sizeof(char));
        }
        }
        if (new_max_stringu > max_stringu){
            max_stringu *= 2;
            jednotlivy_string = (char**) realloc(jednotlivy_string, max_stringu * sizeof(char));
            jednotlivy_string = (char**) calloc(max_stringu, sizeof(char));
            cely_seznam = (char **) realloc(cely_seznam, sizeof(char*) * max_stringu);
            cely_seznam = (char**) calloc(max_delka_stringu, sizeof(char));
            for (int g = max_delka_stringu - new_max_stringu; g<max_stringu; g++){
                cely_seznam[g] = (char*) calloc(max_delka_stringu, sizeof(char));
                jednotlivy_string[g] = (char*) calloc(max_delka_stringu, sizeof(char));
        }
        }
         
        strcpy(*jednotlivy_string, line);
        strcpy(*cely_seznam, *jednotlivy_string);
        if (strcmp(*cely_seznam, "#0") == 0) {
            podminka_pro_prvotni_regal += 1;
            if (podminka_pro_prvotni_regal >= 1){
                i = 0;
                
            }
            else {
                printf("Nespravny vstup.\n");
                for (int g=0; g<max_stringu;g++){
                    free(cely_seznam[g]);
                    free(nakupni_list[g]);
                    free(regaly[g]);
                    free(duplikat[g]);
                    free(nedostupne[g]);
                    free(jednotlivy_string[g]);
                }
                free(cely_seznam);
                free(nakupni_list);
                free(regaly);
                free(duplikat);
                free(nedostupne);
                free(jednotlivy_string);
                free(line);
                return 0;
            }
        }
        while (strcmp(jednotlivy_string[i], "\0") != 0) {
            printf("jednotlivy string %c\n", jednotlivy_string[0][0]);
            printf("jednotlivy string %c\n", jednotlivy_string[0][1]);
            if (jednotlivy_string[0][0] == '#'){ 
                printf("jednotlivy string %c\n", jednotlivy_string[0][0]);
                printf("jednotlivy string %c\n", jednotlivy_string[0][1]);
                i += 1;
                pocet_regalu += 1;
                if (jednotlivy_string[0][1] == podminka_pro_regal) {
                    podminka_pro_regal += 1;
                } 
                else {
                printf("Nespravny vstup.\n");
                for (int g=0; g<max_stringu;g++){
                    free(cely_seznam[g]);
                    free(nakupni_list[g]);
                    free(regaly[g]);
                    free(duplikat[g]);
                    free(nedostupne[g]);
                    free(jednotlivy_string[g]);
                }
                free(cely_seznam);
                free(nakupni_list);
                free(regaly);
                free(duplikat);
                free(nedostupne);
                free(jednotlivy_string);
                free(line);
                return 0;
                }
            }
            i += 1;
        }
        n+=1;
        i=0;
    }
    if (podminka_pro_new_line == 0) {
        printf("Nespravny vstup.\n");
            for (int g=0; g<max_stringu;g++){
                free(cely_seznam[g]);
                free(nakupni_list[g]);
                free(regaly[g]);
                free(duplikat[g]);
                free(nedostupne[g]);
                free(jednotlivy_string[g]);
        }
        free(cely_seznam);
        free(nakupni_list);
        free(regaly);
        free(duplikat);
        free(nedostupne);
        free(jednotlivy_string);
        free(line);
        return 0;
    }
    regaly = (char **) realloc(regaly, sizeof(char*) * max_stringu);
    nakupni_list = (char **) realloc(nakupni_list, sizeof(char*) * max_stringu);
    duplikat = (char **) realloc(duplikat, sizeof(char*) * max_stringu);
    nedostupne = (char **) realloc(nedostupne, sizeof(char*) * max_stringu);
    if (new_max_stringu > max_stringu){
        for (int g = new_max_stringu - max_stringu; g<max_stringu; g++){
        regaly[g] = (char*) calloc(max_stringu, max_delka_stringu);
        nakupni_list[g] = (char*) calloc(max_stringu, max_delka_stringu);
        duplikat[g] = (char*) calloc(max_stringu, max_delka_stringu);
        nedostupne[g] = (char*) calloc(max_stringu, max_delka_stringu);
        } 
    }
    else if (max_stringu < new_max_stringu){
        for (int g = max_stringu - new_max_stringu; g<max_stringu; g++){
        regaly[g] = (char*) calloc(max_stringu, max_delka_stringu);
        nakupni_list[g] = (char*) calloc(max_stringu, max_delka_stringu);
        duplikat[g] = (char*) calloc(max_stringu, max_delka_stringu);
        nedostupne[g] = (char*) calloc(max_stringu, max_delka_stringu);
        }
    }
    for (int i=0; i<n; i++){
        if (strcmp(cely_seznam[i], "\n") != 0){
            strcpy(regaly[i], cely_seznam[i]);
            pocet_v_regalech += 1;
        }
        else {
            break;
        }
    }
    for (int k = pocet_v_regalech + 1; k<n; k++){
        if (strcmp(cely_seznam[i], "\n") != 0){
            strcpy(nakupni_list[index_pro_nakupni_list], cely_seznam[k]);
            index_pro_nakupni_list += 1;
            pocet_slozek_nakupu +=1;
            
        }
        else {
            strcpy(nakupni_list[index_pro_nakupni_list], cely_seznam[k]);
            pocet_slozek_nakupu += 1;
            continue;
        }
    }
    int while_pocet_regalu = pocet_regalu;
    int vytisk = 0;
    int l = 0;
    int pocet_chybejicich = 0;
    printf("Optimalizovany seznam:\n");
    while ((podminka_pro_new_line) != 0){
        while_pocet_regalu = pocet_regalu + 1;
        cislo_iterace = 0;
        l = 0;
        while ( while_pocet_regalu != 0){
            for (int i = zacatecni_index; i <= pocet_slozek_nakupu; i++){
                    cislo_regalu = 0;
                    pocet_chybejicich = 0;
                if (strcmp(nakupni_list[i], "\n") == 0 && cislo_iterace != pocet_regalu){
                    cislo_iterace += 1;
                    while_pocet_regalu -= 1;
                    break;
                } 
                else if (strcmp(nakupni_list[i], "\n") == 0 && cislo_iterace == pocet_regalu){
                    podminka_pro_new_line -= 1;
                    zacatecni_index = i+1;
                    while_pocet_regalu -= 1;
                    for (int polozka = 0; polozka < l; polozka++){
                        printf(" %d. %s -> N/A\n", vytisk, nedostupne[0]);
                        vytisk += 1;
                    }
                    vytisk = 0;
                    printf("Optimalizovany seznam:\n");
                    break;
                } 
                else if (strcmp(nakupni_list[i], "\0") == 0 && cislo_iterace != pocet_regalu){
                    cislo_iterace += 1;
                    break;
                } 
                else if (strcmp(nakupni_list[i], "\0") == 0 && cislo_iterace == pocet_regalu){
                    for (int polozka = 0; polozka < l; polozka++){
                        printf(" %d. %s -> N/A\n", vytisk, nedostupne[0]);
                        vytisk += 1;
                    }
                    for (int g=0; g<max_stringu;g++){
                        free(cely_seznam[g]);
                        free(nakupni_list[g]);
                        free(regaly[g]);
                        free(duplikat[g]);
                        free(nedostupne[g]);
                        free(jednotlivy_string[g]);
                     }
                    free(cely_seznam);
                    free(nakupni_list);
                    free(regaly);
                    free(duplikat);
                    free(nedostupne);
                    free(jednotlivy_string);
                    free(line);
                    return 0;
                }
                else {
                    for (int k = 1; k < pocet_v_regalech; k++){
                        if (strncmp(regaly[k], "#", 1) == 0) {
                            cislo_regalu += 1;
                            continue;
                        }
                        else if (strcasecmp(nakupni_list[i], regaly[k]) == 0 && cislo_iterace == 0){
                            strcpy(duplikat[i], nakupni_list[i]);
                        }
                        else if (strcasestr(regaly[k], nakupni_list[i]) == NULL && cislo_iterace == 0){
                            pocet_chybejicich += 1;
                            if (pocet_chybejicich == (pocet_v_regalech - pocet_regalu)){
                                strcpy(nedostupne[l], nakupni_list[i]);
                                l += 1;
                            }
                        }
                        else if (strcasecmp(nakupni_list[i], regaly[k]) == 0 && cislo_regalu == (cislo_iterace - 1)) {
                            printf(" %d. %s -> #%d %s\n", vytisk, nakupni_list[i], cislo_regalu, regaly[k]);
                            vytisk += 1;
                        }
                        else if (strcasestr(regaly[k], duplikat[i]) != NULL && *duplikat[i] != '\0'){
                                continue;
                        }
                        else if (strcasestr(regaly[k],nakupni_list[i]) && cislo_regalu == (cislo_iterace - 1)){
                            printf(" %d. %s -> #%d %s\n", vytisk, nakupni_list[i], cislo_regalu, regaly[k]);
                            vytisk += 1;
                            *nakupni_list[i] = '1';
                        } 
                    }
                }
            }
        }
        podminka_pro_new_line -=1;
    }
    for (int g=0; g<max_stringu;g++){
        free(cely_seznam[g]);
        free(nakupni_list[g]);
        free(regaly[g]);
        free(duplikat[g]);
        free(nedostupne[g]);
        free(jednotlivy_string[g]);
    }
    free(cely_seznam);
    free(nakupni_list);
    free(regaly);
    free(duplikat);
    free(nedostupne);
    free(jednotlivy_string);
    free(line);
    return 0;
}
